/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution
{
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root)
    {        
        List<IList<int>> levels = new List<IList<int>>();
     
        if (root == null ) return levels;
        
        Stack<TreeNode> currentLevel = new Stack<TreeNode>();
        Stack<TreeNode> nextLevel = new Stack<TreeNode>();
        bool zig = false;
        
        

        currentLevel.Push(root);

        while (currentLevel.Any())
        {
            levels.Add(currentLevel.Select(n => n.val).ToArray());
            zig = !zig;

            while (currentLevel.Any())
            {
                TreeNode node = currentLevel.Pop();
                
                if (zig && node.left != null)
                    nextLevel.Push(node.left);

                if (node.right != null)
                    nextLevel.Push(node.right);

                if (!zig && node.left != null)
                    nextLevel.Push(node.left);
                
            }

            currentLevel = nextLevel;
            nextLevel = new Stack<TreeNode>();
        }

        return levels;
    }
}
